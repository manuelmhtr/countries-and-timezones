{"version":3,"file":"index.js","sources":["../src/build-country.js","../src/build-timezone.js","../src/index.js"],"sourcesContent":["let timezonesMap;\n\nexport default function buildCountry(data, id) {\n  const name = data.countries[id];\n  if (!name) return null;\n\n  const tzMap = getTimezonesMap(data)[id] || {};\n\n  return {\n    id,\n    name,\n    timezones: tzMap.current || [],\n    allTimezones: tzMap.all || [],\n  };\n}\n\nfunction getTimezonesMap(data) {\n  timezonesMap ||= buildTimezonesMap(data);\n  return timezonesMap;\n}\n\nfunction buildTimezonesMap(data) {\n  return Object.keys(data.timezones).reduce((result, id) => {\n    const tz = data.timezones[id];\n    const {c, a} = tz;\n    const aliasTz = data.timezones[a] || {};\n    const countries = c || aliasTz.c;\n\n    if (!countries) return result;\n\n    for (const country of countries) {\n      if (!result[country])\n        Object.assign(result, {[country]: {current: [], all: []}});\n      if (tz.r === undefined) result[country].current.push(id);\n      result[country].all.push(id);\n    }\n\n    return result;\n  }, {});\n}\n","export default function buildTimezone(data, name) {\n  const timezone = data.timezones[name];\n  if (!timezone) return null;\n\n  const {a: aliasOf = null} = timezone;\n  const aliasTz = aliasOf ? data.timezones[aliasOf] : {};\n  const tz = {\n    ...aliasTz,\n    ...data.timezones[name],\n  };\n\n  const countries = tz.c || [];\n  const utcOffset = tz.u;\n  const dstOffset = Number.isInteger(tz.d) ? tz.d : utcOffset;\n\n  const result = {\n    name,\n    countries,\n    utcOffset,\n    utcOffsetStr: getOffsetString(utcOffset),\n    dstOffset,\n    dstOffsetStr: getOffsetString(dstOffset),\n    aliasOf,\n  };\n  if (timezone.r) result.deprecated = true;\n  return result;\n}\n\nfunction getOffsetString(offset) {\n  const hours = Math.floor(Math.abs(offset) / 60);\n  const min = offset % 60;\n  const sign = offset < 0 ? '-' : '+';\n\n  return `${sign}${getNumberString(hours)}:${getNumberString(min)}`;\n}\n\nfunction getNumberString(input) {\n  const number_ = Math.abs(input);\n  const prefix = number_ < 10 ? '0' : '';\n  return `${prefix}${number_}`;\n}\n","import data from './data.json';\nimport buildCountry from './build-country.js';\nimport buildTimezone from './build-timezone.js';\n\nconst totalTimezones = Object.keys(data.timezones).length;\nconst countries = {};\nconst timezones = {};\nlet memoizedTimezones = 0;\n\nexport function getAllCountries(options = {}) {\n  return Object.keys(data.countries).reduce((previous, id) => {\n    return Object.assign(previous, {[id]: getCountry(id, options)});\n  }, {});\n}\n\nexport function getAllTimezones(options = {}) {\n  if (totalTimezones !== memoizedTimezones)\n    for (const name of Object.keys(data.timezones)) {\n      getTimezone(name);\n    }\n\n  return deliverTimezones(timezones, options);\n}\n\nexport function getCountry(id, options = {}) {\n  if (!countries[id]) memoizeCountry(buildCountry(data, id));\n  return deliverCountry(countries[id], options);\n}\n\nfunction memoizeCountry(country) {\n  if (!country) return;\n  countries[country.id] = country;\n}\n\nexport function getTimezone(name) {\n  if (!timezones[name]) memoizeTimezone(buildTimezone(data, name));\n  return timezones[name] ? {...timezones[name]} : null;\n}\n\nfunction memoizeTimezone(timezone) {\n  if (!timezone) return;\n  timezones[timezone.name] = timezone;\n  memoizedTimezones = Object.keys(timezone).length;\n}\n\nexport function getCountriesForTimezone(tzName, options = {}) {\n  const timezone = getTimezone(tzName) || {};\n  const values = timezone.countries || [];\n  return values.map((c) => getCountry(c, options));\n}\n\nexport function getCountryForTimezone(tzName, options = {}) {\n  const [main] = getCountriesForTimezone(tzName, options);\n  return main || null;\n}\n\nexport function getTimezonesForCountry(countryId, options = {}) {\n  const country = getCountry(countryId, options);\n  if (!country) return null;\n  const values = country.timezones || [];\n  return values.map((timezone) => getTimezone(timezone));\n}\n\nfunction deliverTimezones(tzs, options) {\n  const {deprecated} = options || {};\n  if (deprecated === true) return tzs;\n  return Object.keys(tzs).reduce((previous, key) => {\n    if (!tzs[key].deprecated) Object.assign(previous, {[key]: tzs[key]});\n    return previous;\n  }, {});\n}\n\nfunction deliverCountry(country, options) {\n  if (!country) return null;\n  const {deprecated} = options || {};\n  const {allTimezones, ...other} = country;\n  const tz = deprecated ? country.allTimezones : country.timezones;\n  return {...other, timezones: tz};\n}\n\nconst utils = {\n  getCountry,\n  getTimezone,\n  getAllCountries,\n  getAllTimezones,\n  getTimezonesForCountry,\n  getCountriesForTimezone,\n  getCountryForTimezone,\n};\n\nexport default utils;\n"],"names":["timezonesMap","buildCountry","data","id","name","countries","tzMap","getTimezonesMap","timezones","current","allTimezones","all","buildTimezonesMap","Object","keys","reduce","result","tz","c","a","aliasTz","_iterator","_createForOfIteratorHelper","_step","s","n","done","country","value","assign","_defineProperty","r","undefined","push","err","e","f","buildTimezone","timezone","_timezone$a","aliasOf","_objectSpread","utcOffset","u","dstOffset","Number","isInteger","d","utcOffsetStr","getOffsetString","dstOffsetStr","deprecated","offset","hours","Math","floor","abs","min","sign","concat","getNumberString","input","number_","prefix","totalTimezones","length","memoizedTimezones","getAllCountries","options","arguments","previous","getCountry","getAllTimezones","_i","_Object$keys","getTimezone","deliverTimezones","memoizeCountry","deliverCountry","memoizeTimezone","getCountriesForTimezone","tzName","values","map","getCountryForTimezone","_getCountriesForTimez","_getCountriesForTimez2","_slicedToArray","main","getTimezonesForCountry","countryId","tzs","_ref","key","_ref2","other","_objectWithoutProperties","_excluded","utils"],"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"}