{"version":3,"file":"index.js","sources":["../src/build-country.ts","../src/build-timezone.ts","../src/index.ts"],"sourcesContent":["import type {\n  CountriesAndTimezonesData,\n  InternalCountry,\n} from '../types/internal';\nimport type {Country, CountryCode, TimezoneName} from '.';\n\nlet timezonesMap;\n\nexport default function buildCountry(\n  data: CountriesAndTimezonesData,\n  id: CountryCode | string,\n): InternalCountry | null {\n  const name = data.countries[id as CountryCode];\n  if (!name) return null;\n\n  const tzMap = getTimezonesMap(data)[id as CountryCode] || {};\n\n  return {\n    id: id as CountryCode,\n    name,\n    timezones: tzMap.current || [],\n    allTimezones: tzMap.all || [],\n  };\n}\n\nfunction getTimezonesMap(\n  data: CountriesAndTimezonesData,\n): Record<\n  CountryCode,\n  Country & {current: TimezoneName[]; all: TimezoneName[]}\n> {\n  timezonesMap ||= buildTimezonesMap(data);\n  return timezonesMap;\n}\n\nfunction buildTimezonesMap(data: CountriesAndTimezonesData): Record<\n  CountryCode,\n  Country & {\n    current: TimezoneName[];\n    all: TimezoneName[];\n  }\n> {\n  return (Object.keys(data.timezones) as TimezoneName[]).reduce(\n    (result, id) => {\n      const tz = data.timezones[id];\n      const {c, a} = tz as any;\n      const aliasTz = data.timezones[a as TimezoneName] || {};\n      const countries = (c || aliasTz.c) as CountryCode[];\n\n      if (!countries) return result;\n\n      for (const country of countries) {\n        if (!result[country])\n          Object.assign(result, {[country]: {current: [], all: []}});\n        if (tz.r === undefined) result[country].current.push(id);\n        result[country].all.push(id);\n      }\n\n      return result;\n    },\n    {} as Record<\n      CountryCode,\n      Country & {\n        current: TimezoneName[];\n        all: TimezoneName[];\n      }\n    >,\n  );\n}\n","import type {CountriesAndTimezonesData} from '../types/internal';\nimport type {Timezone, TimezoneName} from '.';\n\nexport default function buildTimezone(\n  data: CountriesAndTimezonesData,\n  name: TimezoneName | string,\n): Timezone | null {\n  const timezone = data.timezones[name as TimezoneName];\n  if (!timezone) return null;\n\n  const {a: aliasOf = null} = timezone as any;\n  const aliasTz = aliasOf ? data.timezones[aliasOf as TimezoneName] : {};\n  const tz = {\n    ...aliasTz,\n    ...data.timezones[name as TimezoneName],\n  } as any;\n\n  const countries = tz.c || [];\n  const utcOffset = tz.u;\n  const dstOffset = Number.isInteger(tz.d) ? tz.d : utcOffset;\n\n  const result: Timezone = {\n    name: name as TimezoneName,\n    countries,\n    utcOffset,\n    utcOffsetStr: getOffsetString(utcOffset),\n    dstOffset,\n    dstOffsetStr: getOffsetString(dstOffset),\n    aliasOf,\n  };\n  if (timezone.r) result.deprecated = true;\n  return result;\n}\n\nfunction getOffsetString(offset: number): string {\n  const hours = Math.floor(Math.abs(offset) / 60);\n  const min = offset % 60;\n  const sign = offset < 0 ? '-' : '+';\n\n  return `${sign}${getNumberString(hours)}:${getNumberString(min)}`;\n}\n\nfunction getNumberString(input: number): string {\n  const number_ = Math.abs(input);\n  const prefix = number_ < 10 ? '0' : '';\n  return `${prefix}${number_}`;\n}\n","import type {\n  CountriesAndTimezonesData,\n  InternalCountry,\n} from '../types/internal';\nimport data from './data.json';\nimport buildCountry from './build-country';\nimport buildTimezone from './build-timezone';\n\nexport type CountryCode = keyof typeof data.countries;\nexport type TimezoneName = keyof typeof data.timezones;\n\nexport type Country = {\n  id: CountryCode;\n  name: string;\n  timezones: TimezoneName[];\n};\n\nexport type Timezone = {\n  name: TimezoneName;\n  countries: CountryCode[];\n  utcOffset: number;\n  utcOffsetStr: string;\n  dstOffset: number;\n  dstOffsetStr: string;\n  aliasOf?: TimezoneName;\n  deprecated?: boolean;\n};\n\nexport type Options = {\n  deprecated?: boolean;\n};\n\nconst totalTimezones = Object.keys(data.timezones).length;\nconst countries = {} as Record<CountryCode, InternalCountry>;\nconst timezones = {} as Record<TimezoneName, Timezone>;\nlet memoizedTimezones = 0;\n\n/**\n * Returns an object with the data of all countries.\n * @param {Options} [options={}] - Optional configuration options.\n * @param {boolean} [options.deprecated] - Indicates if the result should include deprecated timezones or not.\n * @returns {Record<CountryCode, Country>} Object with all countries.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const countries = ct.getAllCountries();\n * console.log(countries);\n *\n * // Prints:\n * // {\n * //   AD: {\n * //     id: 'AD',\n * //     name: 'Andorra',\n * //     timezones: [ 'Europe/Andorra' ]\n * //   },\n * //   AE: {\n * //     id: 'AE',\n * //     name: 'United Arab Emirates',\n * //     timezones: [ 'Asia/Dubai' ]\n * //   },\n * //   ...\n * // }\n */\nexport function getAllCountries(\n  options: Options = {},\n): Record<CountryCode, Country> {\n  return Object.keys(data.countries).reduce(\n    (previous, id) => {\n      return Object.assign(previous, {[id]: getCountry(id, options)});\n    },\n    {} as Record<CountryCode, Country>,\n  );\n}\n\n/**\n * Returns an object with the data of all timezones.\n * @param {Options} [options={}] - Optional configuration options.\n * @param {boolean} [options.deprecated] - Indicates if the result should include deprecated timezones or not.\n * @returns {Record<TimezoneName, Timezone>} Object with all timezones.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const timezones = ct.getAllTimezones();\n * console.log(timezones);\n *\n * // Prints:\n * // {\n * //   \"Africa/Abidjan\": {\n * //     \"name\": \"Africa/Abidjan\",\n * //     \"countries\": [\n * //       \"CI\", \"BF\", \"GH\",\n * //       \"GM\", \"GN\", \"ML\",\n * //       \"MR\", \"SH\", \"SL\",\n * //       \"SN\", \"TG\"\n * //     ],\n * //     \"utcOffset\": 0,\n * //     \"utcOffsetStr\": \"+00:00\",\n * //     \"dstOffset\": 0,\n * //     \"dstOffsetStr\": \"+00:00\",\n * //     \"aliasOf\": null\n * //   },\n * //   ...\n * // }\n */\nexport function getAllTimezones(\n  options: Options = {},\n): Record<TimezoneName, Timezone> {\n  if (totalTimezones !== memoizedTimezones)\n    for (const name of Object.keys(data.timezones)) {\n      getTimezone(name);\n    }\n\n  return deliverTimezones(timezones, options);\n}\n\nexport function getCountry(id: CountryCode, options?: Options): Country;\nexport function getCountry(id: string, options?: Options): Country | null;\n/**\n * Returns a country referenced by its id.\n * @param {CountryCode | string} id - The country ISO 3166-1 code.\n * @param {Options} [options={}] - Optional configuration options.\n * @param {boolean} [options.deprecated] - Indicates if the result should include deprecated timezones or not.\n * @returns {(Country | null)} The country data or null if not found.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const country = ct.getCountry(\"DE\");\n * console.log(country);\n *\n * // Prints:\n * // {\n * //   id: 'DE',\n * //   name: 'Germany',\n * //   timezones: [ 'Europe/Berlin', 'Europe/Zurich' ]\n * // }\n */\nexport function getCountry(\n  id: CountryCode | string,\n  options: Options = {},\n): Country | null {\n  if (!countries[id as CountryCode])\n    memoizeCountry(buildCountry(data as CountriesAndTimezonesData, id));\n  return deliverCountry(countries[id as CountryCode], options);\n}\n\nfunction memoizeCountry(country: InternalCountry | null): void {\n  if (!country) return;\n  countries[country.id] = country;\n}\n\nexport function getTimezone(name: TimezoneName): Timezone;\nexport function getTimezone(name: string): Timezone | null;\n/**\n * Returns a timezone referenced by its name.\n * @param {TimezoneName | string} name - The timezone name from tz database.\n * @returns {(Timezone | null)} The timezone data or null if not found.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const timezone = ct.getTimezone(\"America/Los_Angeles\");\n * console.log(timezone);\n *\n * // Prints:\n * // {\n * //   name: 'America/Los_Angeles',\n * //   countries: [ 'US' ],\n * //   utcOffset: -480,\n * //   utcOffsetStr: '-08:00',\n * //   dstOffset: -420,\n * //   dstOffsetStr: '-07:00',\n * //   aliasOf: null\n * // }\n */\nexport function getTimezone(name: TimezoneName | string): Timezone | null {\n  if (!timezones[name as TimezoneName])\n    memoizeTimezone(buildTimezone(data as CountriesAndTimezonesData, name));\n  return timezones[name as TimezoneName]\n    ? {...timezones[name as TimezoneName]}\n    : null;\n}\n\nfunction memoizeTimezone(timezone: Timezone | null): void {\n  if (!timezone) return;\n  timezones[timezone.name] = timezone;\n  memoizedTimezones = Object.keys(timezone).length;\n}\n\n/**\n * Returns a list of the countries that uses a timezone given its name.\n * When a timezone has multiple countries the first element is more relevant\n * due to its geographical location.\n * @param {TimezoneName | string} tzName - The timezone name.\n * @param {Options} [options={}] - Optional configuration options.\n * @param {boolean} [options.deprecated] - Indicates if the result should include deprecated timezones or not.\n * @returns {Country[]} Array of countries that use the timezone.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const timezone = ct.getCountriesForTimezone(\"Europe/Zurich\");\n * console.log(timezone);\n *\n * // Prints:\n * // [\n * //   {\n * //     \"id\": \"CH\",\n * //     \"name\": \"Switzerland\",\n * //     \"timezones\": [\n * //       \"Europe/Zurich\"\n * //     ]\n * //   },\n * //   {\n * //     \"id\": \"DE\",\n * //     \"name\": \"Germany\",\n * //     \"timezones\": [\n * //       \"Europe/Berlin\",\n * //       \"Europe/Zurich\"\n * //     ]\n * //   },\n * //   {\n * //     \"id\": \"LI\",\n * //     \"name\": \"Liechtenstein\",\n * //     \"timezones\": [\n * //       \"Europe/Zurich\"\n * //     ]\n * //   }\n * // ]\n */\nexport function getCountriesForTimezone(\n  tzName: TimezoneName | string,\n  options: Options = {},\n): Country[] {\n  const timezone = getTimezone(tzName) || ({} as Timezone);\n  const values = timezone.countries || [];\n  return values.map((c) => getCountry(c, options));\n}\n\nexport function getCountryForTimezone(\n  tzName: TimezoneName,\n  options?: Options,\n): Country;\nexport function getCountryForTimezone(\n  tzName: string,\n  options?: Options,\n): Country | null;\n/**\n * Returns the most relevant country (due to its geographical location) that uses a timezone given its name.\n * @param {TimezoneName | string} tzName - The timezone name.\n * @param {Options} [options={}] - Optional configuration options.\n * @param {boolean} [options.deprecated] - Indicates if the result should include deprecated timezones or not.\n * @returns {(Country | null)} The country data or null if not found.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const timezone = ct.getCountryForTimezone(\"Europe/Zurich\");\n * console.log(timezone);\n *\n * // Prints:\n * // {\n * //   \"id\": \"CH\",\n * //   \"name\": \"Switzerland\",\n * //   \"timezones\": [\n * //     \"Europe/Zurich\"\n * //   ]\n * // }\n */\nexport function getCountryForTimezone(\n  tzName: TimezoneName | string,\n  options: Options = {},\n): Country | null {\n  const [main] = getCountriesForTimezone(tzName, options);\n  return main || null;\n}\n\nexport function getTimezonesForCountry(\n  countryId: CountryCode,\n  options?: Options,\n): Timezone[];\nexport function getTimezonesForCountry(\n  countryId: string,\n  options?: Options,\n): Timezone[] | null;\n/**\n * Returns an array with all the timezones of a country given its id.\n * @param {CountryCode | string} countryId - The country ISO 3166-1 code.\n * @param {Options} [options={}] - Optional configuration options.\n * @param {boolean} [options.deprecated] - Indicates if the result should include deprecated timezones or not.\n * @returns {(Timezone[] | null)} Array of timezones or null if country not found.\n * @example\n * const ct = require(\"countries-and-timezones\");\n *\n * const timezones = ct.getTimezonesForCountry(\"MX\");\n * console.log(timezones);\n *\n * // Prints:\n * // [\n * //   {\n * //     \"name\": \"America/Bahia_Banderas\",\n * //     \"countries\": [ \"MX\" ],\n * //     \"utcOffset\": -360,\n * //     \"utcOffsetStr\": \"-06:00\",\n * //     \"dstOffset\": -300,\n * //     \"dstOffsetStr\": \"-05:00\",\n * //     \"aliasOf\": null\n * //   },\n * //   ...\n * // ]\n */\nexport function getTimezonesForCountry(\n  countryId: CountryCode | string,\n  options: Options = {},\n): Timezone[] | null {\n  const country = getCountry(countryId, options);\n  if (!country) return null;\n  const values = country.timezones || [];\n  return values.map((timezone) => getTimezone(timezone));\n}\n\nfunction deliverTimezones(\n  tzs: Record<TimezoneName, Timezone>,\n  options?: Options,\n): Record<TimezoneName, Timezone> {\n  const {deprecated} = options || {};\n  if (deprecated === true) return tzs;\n  return (Object.keys(tzs) as TimezoneName[]).reduce(\n    (previous, key) => {\n      if (!tzs[key].deprecated) Object.assign(previous, {[key]: tzs[key]});\n      return previous;\n    },\n    {} as Record<TimezoneName, Timezone>,\n  );\n}\n\nfunction deliverCountry(\n  country: InternalCountry | undefined,\n  options?: Options,\n): Country | null {\n  if (!country) return null;\n  const {deprecated} = options || {};\n  const {allTimezones, ...other} = country;\n  const tz = deprecated ? country.allTimezones : country.timezones;\n  return {...other, timezones: tz};\n}\n\nconst utils = {\n  getCountry,\n  getTimezone,\n  getAllCountries,\n  getAllTimezones,\n  getTimezonesForCountry,\n  getCountriesForTimezone,\n  getCountryForTimezone,\n};\n\nexport default utils;\n"],"names":["data","countries"],"mappings":"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"}